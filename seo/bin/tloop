#!/bin/bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

if [ $# -ne 3 ]; then
	echo "This routine takes a sequence of images interleaving g', r', and i' filters."
    echo "Usage: tloop <number of image sets: g',r',i'> <image exposure time (seconds)> <ccd binning, e.g., 2>"
    exit 1
fi

#input params
SET_SIZE=$1
EXPOSURE_SEC=$2
BINNING=$3
#FILTER=$6

#change these as desired
MINIMUM_ALT=20

COUNT=0
SUCCESS=0

#is slit open? if not, closedown
function checkSlit {
  if [ -n "`tx slit | grep "slit=open"`" ]
  then
  	echo "Slit is open." > /dev/null
  else
	alert "Slit closed unexpectedly. Closing down observatory..."
	closedown
	exit 1	  
  fi
}

function checkAlt {
  local ALT=`tx where | grep -o 'alt=[0-9\.]\+' | cut -c5-`
  if [ ${ALT%.*} -lt ${MINIMUM_ALT%.*} ]
  then
 	alert "Altitude of telescope ($ALT) too low. Closing down observatory..."
	closedown
	exit 1
  fi
}
#send text notification to Slack #seo9000 channel
#parameter is $1=message, e.g. alert "This is a test!"
function alert {
    local MESSAGE="`date -u +"%m-%d-%Y %H:%M:%S"` $1"
    $DIR/slackalert "$MESSAGE"
    echo $MESSAGE
    debug "$1"
}

#upload image to Slack #seo9001 channel
#parameter is $1=filepath, e.g. preview <filepath> <message (optional)>
function preview {
    $DIR/stiffy "$1" "$1.tif"
    convert -resize 50% -normalize -quality 75 "$1.tif" "$1.tif.jpg"
    ($DIR/slackpreview "$1.tif.jpg" "$1"; rm "$1.tif"; rm "$1.tif.jpg") &
}

#send text notification to Slack #seo9001 channel
#parameter is $1=message, e.g. debug "This is a test!"
function debug {
    local MESSAGE="`date -u +"%m-%d-%Y %H:%M:%S"` $1"
    $DIR/slackdebug "$MESSAGE"
}

function checkCCDTemp {
  local MAX_CCD_TEMP=0
  local CCD_TEMP=`tx ccd_status | grep -o 'tchip=[0-9\.\-]\+' | cut -c7-`
  if [ ${CCD_TEMP%.*} -gt ${MAX_CCD_TEMP%.*} ]
  then
 	alert "CCD not cooled (T=$CCD_TEMP). Cooling..."
	ccd cool
    sleep 3
    local CCD_TEMP2=`tx ccd_status | grep -o 'tchip=[0-9\.\-]\+' | cut -c7-`
    #echo $CCD_TEMP2
    if [ ${CCD_TEMP2%.*} -gt ${MAX_CCD_TEMP%.*} ]
    then
      alert "Error. CCD cooling failed. Image sequence aborted."
      exit 1
    else
      debug "CCD temperature is $CCD_TEMP2 degrees."
    fi
  else
    debug "CCD temperature is $CCD_TEMP degrees."
  fi
}

#take image
#parameters are $1=time, $2=binning, $3="dark" or "", $4=outfile
function getImage {
    SUCCESS=1
    image time=$1 bin=$2 $3 outfile=$4
    if [ $? -eq 0 ]
    then
        debug "Got image ($4)."
        preview "$4" "$4"
    else
        alert "Error. Image command failed ($4)."
        sleep 5
        SUCCESS=0
    fi
}

#make sure the slit is open!
#checkSlit

#pfilter $FILTER
tx track on

#make sure telescope is not set too low
checkAlt

#get the target images
alert "Taking $SET_SIZE image sets(s) (bin=$BINNING, time=$EXPOSURE_SEC, filters=g',r',i')..."
#check ccd status before starting
checkCCDTemp
for (( k=1; k<=$SET_SIZE; k++ ))
do
  #checkSlit
  #checkAlt
  #report position
  tx where
  pfilter g-band
  getImage $EXPOSURE_SEC $BINNING "" `date -u +"%Y%m%d.%H%M%S%3N"`.`printf "%03d" $COUNT`.g.fits
  pfilter r-band
  getImage $EXPOSURE_SEC $BINNING "" `date -u +"%Y%m%d.%H%M%S%3N"`.`printf "%03d" $COUNT`.r.fits
  pfilter i-band
  getImage $EXPOSURE_SEC $BINNING "" `date -u +"%Y%m%d.%H%M%S%3N"`.`printf "%03d" $COUNT`.i.fits  
  if [ $SUCCESS -eq 1 ]
  then
    echo -e "`date -u +"%m-%d-%Y %H:%M:%S"` Image frame (#=`printf "%03d" $COUNT`) complete."
	COUNT=$((COUNT+1))
  fi
  #ensure tracking is on
  tx track on > /dev/null
done

alert "Image sequence complete. Obtained $COUNT image set(s)."
